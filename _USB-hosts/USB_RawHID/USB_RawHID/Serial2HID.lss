
Serial2HID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000087a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000806  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800100  00800100  0000087a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ae  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000332  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000476  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb4  00000000  00000000  00001f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ac c0       	rjmp	.+344    	; 0x15a <__ctors_end>
   2:	00 00       	nop
   4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
   6:	00 00       	nop
   8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
   a:	00 00       	nop
   c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
   e:	00 00       	nop
  10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
  12:	00 00       	nop
  14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
  16:	00 00       	nop
  18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
  22:	00 00       	nop
  24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
  26:	00 00       	nop
  28:	75 c2       	rjmp	.+1258   	; 0x514 <__vector_10>
  2a:	00 00       	nop
  2c:	aa c2       	rjmp	.+1364   	; 0x582 <__vector_11>
  2e:	00 00       	nop
  30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
  36:	00 00       	nop
  38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a7 c0       	rjmp	.+334    	; 0x190 <__bad_interrupt>
  42:	00 00       	nop
  44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
  46:	00 00       	nop
  48:	a3 c0       	rjmp	.+326    	; 0x190 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
  52:	00 00       	nop
  54:	9d c0       	rjmp	.+314    	; 0x190 <__bad_interrupt>
  56:	00 00       	nop
  58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
  5e:	00 00       	nop
  60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
  62:	00 00       	nop
  64:	dd c0       	rjmp	.+442    	; 0x220 <__vector_25>
  66:	00 00       	nop
  68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
  72:	00 00       	nop
  74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
  76:	00 00       	nop
  78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
  7e:	00 00       	nop
  80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
  82:	00 00       	nop
  84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
  86:	00 00       	nop
  88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	81 c0       	rjmp	.+258    	; 0x190 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7f c0       	rjmp	.+254    	; 0x190 <__bad_interrupt>
  92:	00 00       	nop
  94:	7d c0       	rjmp	.+250    	; 0x190 <__bad_interrupt>
  96:	00 00       	nop
  98:	7b c0       	rjmp	.+246    	; 0x190 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	79 c0       	rjmp	.+242    	; 0x190 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	77 c0       	rjmp	.+238    	; 0x190 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	75 c0       	rjmp	.+234    	; 0x190 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	73 c0       	rjmp	.+230    	; 0x190 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	40 01       	movw	r8, r0
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 fb       	bst	r16, 0
  b8:	00 29       	or	r16, r0
  ba:	00 22       	and	r0, r16
  bc:	00 00       	nop
  be:	24 01       	movw	r4, r8
  c0:	1c 00       	.word	0x001c	; ????
  c2:	21 00       	.word	0x0021	; ????
  c4:	00 0d       	add	r16, r0
  c6:	01 09       	sbc	r16, r1
  c8:	00 03       	mulsu	r16, r16
  ca:	00 00       	nop
  cc:	f7 00       	.word	0x00f7	; ????
  ce:	04 01       	movw	r0, r8
  d0:	03 09       	sbc	r16, r3
  d2:	04 eb       	ldi	r16, 0xB4	; 180
  d4:	00 0a       	sbc	r0, r16
  d6:	02 03       	mulsu	r16, r18
  d8:	09 04       	cpc	r0, r9
  da:	dd 00       	.word	0x00dd	; ????
  dc:	0c 0c       	add	r0, r12

000000dd <string2>:
  dd:	0c 03 53 00 41 00 42 00 52 00 65 00 00 00           ..S.A.B.R.e...

000000eb <string1>:
  eb:	0a 03 49 00 43 00 53 00 54 00 00 00                 ..I.C.S.T...

000000f7 <string0>:
  f7:	04 03 09 04                                         ....

000000fb <config1_descriptor>:
  fb:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
 10b:	00 00 09 21 11 01 00 01 22 1c 00 07 05 81 03 40     ...!...."......@
 11b:	00 01 07 05 02 03 40 00 08                          ......@..

00000124 <rawhid_hid_report_desc>:
 124:	06 ab ff 0a 00 01 a1 01 75 08 15 00 26 ff 00 95     ........u...&...
 134:	40 09 01 81 02 95 40 09 02 91 02 c0                 @.....@.....

00000140 <device_descriptor>:
 140:	12 01 00 02 00 00 00 40 57 1c be 5a 00 01 01 02     .......@W..Z....
 150:	00 01                                               ..

00000152 <endpoint_config_table>:
 152:	01 c1 32 01 c0 32 00 00                             ..2..2..

0000015a <__ctors_end>:
 15a:	11 24       	eor	r1, r1
 15c:	1f be       	out	0x3f, r1	; 63
 15e:	cf ef       	ldi	r28, 0xFF	; 255
 160:	da e0       	ldi	r29, 0x0A	; 10
 162:	de bf       	out	0x3e, r29	; 62
 164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
 166:	11 e0       	ldi	r17, 0x01	; 1
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	e6 e0       	ldi	r30, 0x06	; 6
 16e:	f8 e0       	ldi	r31, 0x08	; 8
 170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x10>
 172:	05 90       	lpm	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	a0 30       	cpi	r26, 0x00	; 0
 178:	b1 07       	cpc	r27, r17
 17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0xc>

0000017c <__do_clear_bss>:
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
 184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
 186:	a8 34       	cpi	r26, 0x48	; 72
 188:	b2 07       	cpc	r27, r18
 18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
 18c:	02 d0       	rcall	.+4      	; 0x192 <main>
 18e:	39 c3       	rjmp	.+1650   	; 0x802 <_exit>

00000190 <__bad_interrupt>:
 190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <main>:
{
	static uint8_t retVal;
	static uint8_t timeoutCnt = 0;
	
	// set for 16 MHz clock
	CPU_PRESCALE(0);
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	80 93 61 00 	sts	0x0061, r24
 198:	10 92 61 00 	sts	0x0061, r1

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 19c:	ba d0       	rcall	.+372    	; 0x312 <usb_init>
 19e:	d0 d0       	rcall	.+416    	; 0x340 <usb_configured>
	while (!usb_configured()) /* wait */ ;
 1a0:	88 23       	and	r24, r24
 1a2:	e9 f3       	breq	.-6      	; 0x19e <main+0xc>
 1a4:	10 92 c9 00 	sts	0x00C9, r1

	// Initialize the USART1 for serial data reception @ 230400 bps from receiver
	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 1a8:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
 1ac:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	90 e0       	ldi	r25, 0x00	; 0
	/* Set the new baud rate before configuring the USART */
	UBRR1  = 8;
 1b4:	90 93 cd 00 	sts	0x00CD, r25
 1b8:	80 93 cc 00 	sts	0x00CC, r24
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	80 93 ca 00 	sts	0x00CA, r24
	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ((1 << UCSZ10) | (1 << UCSZ11));
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1A = (1 << U2X1);
 1c8:	80 e9       	ldi	r24, 0x90	; 144
 1ca:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B = ((1 << RXCIE1) | (1 << RXEN1));
 1ce:	87 b1       	in	r24, 0x07	; 7
 1d0:	80 6c       	ori	r24, 0xC0	; 192
	
	/* Initialize the pin PC6 to monitor USART reception and PC7 to show lost synchronization */
	DDRC |= ((1 << DDC6) | (1 << DDC7));
 1d2:	87 b9       	out	0x07, r24	; 7
 1d4:	10 92 47 01 	sts	0x0147, r1
	
	do_output = 0;
 1d8:	10 92 06 01 	sts	0x0106, r1
	buffer_counter = 0;
 1dc:	10 92 05 01 	sts	0x0105, r1
	sync_flag = 0;	
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x54>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x5e>
 1f0:	00 00       	nop
 1f2:	80 91 47 01 	lds	r24, 0x0147
	// and do whatever it does to actually be ready for input
	_delay_ms(1000);

	while (1) {
		// if time to send output, transmit something interesting
		if (do_output) {
 1f6:	88 23       	and	r24, r24
 1f8:	e1 f3       	breq	.-8      	; 0x1f2 <main+0x60>
 1fa:	10 92 47 01 	sts	0x0147, r1
			do_output = 0;
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	87 e0       	ldi	r24, 0x07	; 7
			if((retVal = usb_rawhid_send(buffer, 0)) == 0) {
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	a0 d0       	rcall	.+320    	; 0x346 <usb_rawhid_send>
 206:	80 93 01 01 	sts	0x0101, r24
 20a:	81 11       	cpse	r24, r1
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0x88>
 20e:	80 91 00 01 	lds	r24, 0x0100
 212:	8f 5f       	subi	r24, 0xFF	; 255
				timeoutCnt += 1;
 214:	80 93 00 01 	sts	0x0100, r24
 218:	ec cf       	rjmp	.-40     	; 0x1f2 <main+0x60>
 21a:	10 92 00 01 	sts	0x0100, r1
 21e:	e9 cf       	rjmp	.-46     	; 0x1f2 <main+0x60>

00000220 <__vector_25>:
			}
			else {
				timeoutCnt = 0;
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	cli();
 230:	f8 94       	cli
	buffer[buffer_counter] = UDR1;
 232:	e0 91 06 01 	lds	r30, 0x0106
 236:	80 91 ce 00 	lds	r24, 0x00CE
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	e9 5f       	subi	r30, 0xF9	; 249
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	80 83       	st	Z, r24
	
	/* If sync between buffer and receiver message lost, wait for start frame and re-sync */
	if(sync_flag == 0) {
 242:	80 91 05 01 	lds	r24, 0x0105
 246:	81 11       	cpse	r24, r1
 248:	16 c0       	rjmp	.+44     	; 0x276 <__vector_25+0x56>
		if((buffer_counter == 0) && (buffer[buffer_counter] == 0x41)) {
 24a:	80 91 06 01 	lds	r24, 0x0106
 24e:	81 11       	cpse	r24, r1
 250:	0e c0       	rjmp	.+28     	; 0x26e <__vector_25+0x4e>
 252:	e0 91 06 01 	lds	r30, 0x0106
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	e9 5f       	subi	r30, 0xF9	; 249
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	80 81       	ld	r24, Z
 25e:	81 34       	cpi	r24, 0x41	; 65
 260:	31 f4       	brne	.+12     	; 0x26e <__vector_25+0x4e>
			PORTC |= (1 << PORTC7);
 262:	47 9a       	sbi	0x08, 7	; 8
			sync_flag = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 05 01 	sts	0x0105, r24
			PORTC &= ~(1 << PORTC7);
 26a:	47 98       	cbi	0x08, 7	; 8
 26c:	04 c0       	rjmp	.+8      	; 0x276 <__vector_25+0x56>
		}
		else {
			//PORTC |= (1 << PORTC7);
			buffer_counter = 0;
 26e:	10 92 06 01 	sts	0x0106, r1
			sync_flag = 0;
 272:	10 92 05 01 	sts	0x0105, r1
			//PORTC &= ~(1 << PORTC7);
		}
	}
	
	if(sync_flag) {
 276:	80 91 05 01 	lds	r24, 0x0105
 27a:	88 23       	and	r24, r24
 27c:	e1 f1       	breq	.+120    	; 0x2f6 <__vector_25+0xd6>
		if(buffer[buffer_counter] == 0x5A) {
 27e:	e0 91 06 01 	lds	r30, 0x0106
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e9 5f       	subi	r30, 0xF9	; 249
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	80 81       	ld	r24, Z
 28a:	8a 35       	cpi	r24, 0x5A	; 90
 28c:	11 f5       	brne	.+68     	; 0x2d2 <__vector_25+0xb2>
			if(buffer[0] == 0x41) {
 28e:	80 91 07 01 	lds	r24, 0x0107
 292:	81 34       	cpi	r24, 0x41	; 65
 294:	59 f5       	brne	.+86     	; 0x2ec <__vector_25+0xcc>
				if((buffer[1] == SABRE_ADDRESS_01) && (buffer_counter == (SABRE_MESSLEN_01-1))) {
 296:	80 91 08 01 	lds	r24, 0x0108
 29a:	80 3f       	cpi	r24, 0xF0	; 240
 29c:	29 f4       	brne	.+10     	; 0x2a8 <__vector_25+0x88>
 29e:	80 91 06 01 	lds	r24, 0x0106
 2a2:	86 31       	cpi	r24, 0x16	; 22
 2a4:	19 f5       	brne	.+70     	; 0x2ec <__vector_25+0xcc>
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <__vector_25+0xa2>
					PORTC |= (1 << PORTC6);
					do_output = 1;
					buffer_counter = 0;
					PORTC &= ~(1 << PORTC6);
				}
				else if((buffer[1] == SABRE_ADDRESS_02) && (buffer_counter == (SABRE_MESSLEN_02-1))) {
 2a8:	81 3f       	cpi	r24, 0xF1	; 241
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <__vector_25+0x96>
 2ac:	80 91 06 01 	lds	r24, 0x0106
 2b0:	89 32       	cpi	r24, 0x29	; 41
 2b2:	e1 f4       	brne	.+56     	; 0x2ec <__vector_25+0xcc>
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <__vector_25+0xa2>
					PORTC |= (1 << PORTC6);
					do_output = 1;
					buffer_counter = 0;
					PORTC &= ~(1 << PORTC6);
				}
				else if((buffer[1] == SABRE_ADDRESS_03) && (buffer_counter == (SABRE_MESSLEN_03-1))) {
 2b6:	82 3f       	cpi	r24, 0xF2	; 242
 2b8:	c9 f4       	brne	.+50     	; 0x2ec <__vector_25+0xcc>
 2ba:	80 91 06 01 	lds	r24, 0x0106
 2be:	8e 30       	cpi	r24, 0x0E	; 14
 2c0:	a9 f4       	brne	.+42     	; 0x2ec <__vector_25+0xcc>
					PORTC |= (1 << PORTC6);
 2c2:	46 9a       	sbi	0x08, 6	; 8
					do_output = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 47 01 	sts	0x0147, r24
					buffer_counter = 0;
 2ca:	10 92 06 01 	sts	0x0106, r1
					PORTC &= ~(1 << PORTC6);
 2ce:	46 98       	cbi	0x08, 6	; 8
 2d0:	12 c0       	rjmp	.+36     	; 0x2f6 <__vector_25+0xd6>
			else {
				buffer_counter += 1;
			}
		}
		else {
			if(buffer_counter >= SABRE_MESSLEN_MAX) {
 2d2:	80 91 06 01 	lds	r24, 0x0106
 2d6:	8a 32       	cpi	r24, 0x2A	; 42
 2d8:	48 f0       	brcs	.+18     	; 0x2ec <__vector_25+0xcc>
				PORTC |= ((1 << PORTC6) || (1 << PORTC7));
 2da:	40 9a       	sbi	0x08, 0	; 8
				sync_flag = 0;
 2dc:	10 92 05 01 	sts	0x0105, r1
				buffer_counter = 0;
 2e0:	10 92 06 01 	sts	0x0106, r1
				PORTC &= ((1 << PORTC6) || (1 << PORTC7));
 2e4:	88 b1       	in	r24, 0x08	; 8
 2e6:	81 70       	andi	r24, 0x01	; 1
 2e8:	88 b9       	out	0x08, r24	; 8
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <__vector_25+0xd6>
			}
			else {
				buffer_counter += 1;
 2ec:	80 91 06 01 	lds	r24, 0x0106
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 06 01 	sts	0x0106, r24
			//else {
				//buffer_counter += 1;
			//}
		//}
	}
	sei();
 2f6:	78 94       	sei
}
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 308:	80 91 e8 00 	lds	r24, 0x00E8
 30c:	80 ff       	sbrs	r24, 0
 30e:	fc cf       	rjmp	.-8      	; 0x308 <usb_wait_in_ready>
}
 310:	08 95       	ret

00000312 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 318:	80 ea       	ldi	r24, 0xA0	; 160
 31a:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 31e:	82 e1       	ldi	r24, 0x12	; 18
 320:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 322:	09 b4       	in	r0, 0x29	; 41
 324:	00 fe       	sbrs	r0, 0
 326:	fd cf       	rjmp	.-6      	; 0x322 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 328:	80 e9       	ldi	r24, 0x90	; 144
 32a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 32e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 332:	10 92 04 01 	sts	0x0104, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 33c:	78 94       	sei
 33e:	08 95       	ret

00000340 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 340:	80 91 04 01 	lds	r24, 0x0104
}
 344:	08 95       	ret

00000346 <usb_rawhid_send>:
	return RAWHID_RX_SIZE;
}

// send a packet, with timeout
int8_t usb_rawhid_send(const uint8_t *buffer, uint8_t timeout)
{
 346:	fc 01       	movw	r30, r24
	uint8_t intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 348:	80 91 04 01 	lds	r24, 0x0104
 34c:	81 11       	cpse	r24, r1
 34e:	02 c0       	rjmp	.+4      	; 0x354 <usb_rawhid_send+0xe>
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	08 95       	ret
	intr_state = SREG;
 354:	8f b7       	in	r24, 0x3f	; 63
	cli();
 356:	f8 94       	cli
	tx_timeout_count = timeout;
 358:	60 93 02 01 	sts	0x0102, r22
	UENUM = RAWHID_TX_ENDPOINT;
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	90 93 e9 00 	sts	0x00E9, r25
	// wait for the FIFO to be ready to accept data
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
 362:	20 91 e8 00 	lds	r18, 0x00E8
 366:	25 fd       	sbrc	r18, 5
 368:	0d c0       	rjmp	.+26     	; 0x384 <usb_rawhid_send+0x3e>
		SREG = intr_state;
 36a:	8f bf       	out	0x3f, r24	; 63
		if (tx_timeout_count == 0) return 0;
 36c:	80 91 02 01 	lds	r24, 0x0102
 370:	88 23       	and	r24, r24
 372:	09 f4       	brne	.+2      	; 0x376 <usb_rawhid_send+0x30>
 374:	cd c0       	rjmp	.+410    	; 0x510 <usb_rawhid_send+0x1ca>
		if (!usb_configuration) return -1;
 376:	80 91 04 01 	lds	r24, 0x0104
 37a:	88 23       	and	r24, r24
 37c:	49 f3       	breq	.-46     	; 0x350 <usb_rawhid_send+0xa>
		intr_state = SREG;
 37e:	8f b7       	in	r24, 0x3f	; 63
		cli();
 380:	f8 94       	cli
 382:	ed cf       	rjmp	.-38     	; 0x35e <usb_rawhid_send+0x18>
		UENUM = RAWHID_TX_ENDPOINT;
	}
	// write bytes from the FIFO
	#if (RAWHID_TX_SIZE >= 64)
	UEDATX = *buffer++;
 384:	90 81       	ld	r25, Z
 386:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 63)
	UEDATX = *buffer++;
 38a:	91 81       	ldd	r25, Z+1	; 0x01
 38c:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 62)
	UEDATX = *buffer++;
 390:	92 81       	ldd	r25, Z+2	; 0x02
 392:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 61)
	UEDATX = *buffer++;
 396:	93 81       	ldd	r25, Z+3	; 0x03
 398:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 60)
	UEDATX = *buffer++;
 39c:	94 81       	ldd	r25, Z+4	; 0x04
 39e:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 59)
	UEDATX = *buffer++;
 3a2:	95 81       	ldd	r25, Z+5	; 0x05
 3a4:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 58)
	UEDATX = *buffer++;
 3a8:	96 81       	ldd	r25, Z+6	; 0x06
 3aa:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 57)
	UEDATX = *buffer++;
 3ae:	97 81       	ldd	r25, Z+7	; 0x07
 3b0:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 56)
	UEDATX = *buffer++;
 3b4:	90 85       	ldd	r25, Z+8	; 0x08
 3b6:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 55)
	UEDATX = *buffer++;
 3ba:	91 85       	ldd	r25, Z+9	; 0x09
 3bc:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 54)
	UEDATX = *buffer++;
 3c0:	92 85       	ldd	r25, Z+10	; 0x0a
 3c2:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 53)
	UEDATX = *buffer++;
 3c6:	93 85       	ldd	r25, Z+11	; 0x0b
 3c8:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 52)
	UEDATX = *buffer++;
 3cc:	94 85       	ldd	r25, Z+12	; 0x0c
 3ce:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 51)
	UEDATX = *buffer++;
 3d2:	95 85       	ldd	r25, Z+13	; 0x0d
 3d4:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 50)
	UEDATX = *buffer++;
 3d8:	96 85       	ldd	r25, Z+14	; 0x0e
 3da:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 49)
	UEDATX = *buffer++;
 3de:	97 85       	ldd	r25, Z+15	; 0x0f
 3e0:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 48)
	UEDATX = *buffer++;
 3e4:	90 89       	ldd	r25, Z+16	; 0x10
 3e6:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 47)
	UEDATX = *buffer++;
 3ea:	91 89       	ldd	r25, Z+17	; 0x11
 3ec:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 46)
	UEDATX = *buffer++;
 3f0:	92 89       	ldd	r25, Z+18	; 0x12
 3f2:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 45)
	UEDATX = *buffer++;
 3f6:	93 89       	ldd	r25, Z+19	; 0x13
 3f8:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 44)
	UEDATX = *buffer++;
 3fc:	94 89       	ldd	r25, Z+20	; 0x14
 3fe:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 43)
	UEDATX = *buffer++;
 402:	95 89       	ldd	r25, Z+21	; 0x15
 404:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 42)
	UEDATX = *buffer++;
 408:	96 89       	ldd	r25, Z+22	; 0x16
 40a:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 41)
	UEDATX = *buffer++;
 40e:	97 89       	ldd	r25, Z+23	; 0x17
 410:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 40)
	UEDATX = *buffer++;
 414:	90 8d       	ldd	r25, Z+24	; 0x18
 416:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 39)
	UEDATX = *buffer++;
 41a:	91 8d       	ldd	r25, Z+25	; 0x19
 41c:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 38)
	UEDATX = *buffer++;
 420:	92 8d       	ldd	r25, Z+26	; 0x1a
 422:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 37)
	UEDATX = *buffer++;
 426:	93 8d       	ldd	r25, Z+27	; 0x1b
 428:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 36)
	UEDATX = *buffer++;
 42c:	94 8d       	ldd	r25, Z+28	; 0x1c
 42e:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 35)
	UEDATX = *buffer++;
 432:	95 8d       	ldd	r25, Z+29	; 0x1d
 434:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 34)
	UEDATX = *buffer++;
 438:	96 8d       	ldd	r25, Z+30	; 0x1e
 43a:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 33)
	UEDATX = *buffer++;
 43e:	97 8d       	ldd	r25, Z+31	; 0x1f
 440:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 32)
	UEDATX = *buffer++;
 444:	90 a1       	ldd	r25, Z+32	; 0x20
 446:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 31)
	UEDATX = *buffer++;
 44a:	91 a1       	ldd	r25, Z+33	; 0x21
 44c:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 30)
	UEDATX = *buffer++;
 450:	92 a1       	ldd	r25, Z+34	; 0x22
 452:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 29)
	UEDATX = *buffer++;
 456:	93 a1       	ldd	r25, Z+35	; 0x23
 458:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 28)
	UEDATX = *buffer++;
 45c:	94 a1       	ldd	r25, Z+36	; 0x24
 45e:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 27)
	UEDATX = *buffer++;
 462:	95 a1       	ldd	r25, Z+37	; 0x25
 464:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 26)
	UEDATX = *buffer++;
 468:	96 a1       	ldd	r25, Z+38	; 0x26
 46a:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 25)
	UEDATX = *buffer++;
 46e:	97 a1       	ldd	r25, Z+39	; 0x27
 470:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 24)
	UEDATX = *buffer++;
 474:	90 a5       	ldd	r25, Z+40	; 0x28
 476:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 23)
	UEDATX = *buffer++;
 47a:	91 a5       	ldd	r25, Z+41	; 0x29
 47c:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 22)
	UEDATX = *buffer++;
 480:	92 a5       	ldd	r25, Z+42	; 0x2a
 482:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 21)
	UEDATX = *buffer++;
 486:	93 a5       	ldd	r25, Z+43	; 0x2b
 488:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 20)
	UEDATX = *buffer++;
 48c:	94 a5       	ldd	r25, Z+44	; 0x2c
 48e:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 19)
	UEDATX = *buffer++;
 492:	95 a5       	ldd	r25, Z+45	; 0x2d
 494:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 18)
	UEDATX = *buffer++;
 498:	96 a5       	ldd	r25, Z+46	; 0x2e
 49a:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 17)
	UEDATX = *buffer++;
 49e:	97 a5       	ldd	r25, Z+47	; 0x2f
 4a0:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 16)
	UEDATX = *buffer++;
 4a4:	90 a9       	ldd	r25, Z+48	; 0x30
 4a6:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 15)
	UEDATX = *buffer++;
 4aa:	91 a9       	ldd	r25, Z+49	; 0x31
 4ac:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 14)
	UEDATX = *buffer++;
 4b0:	92 a9       	ldd	r25, Z+50	; 0x32
 4b2:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 13)
	UEDATX = *buffer++;
 4b6:	93 a9       	ldd	r25, Z+51	; 0x33
 4b8:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 12)
	UEDATX = *buffer++;
 4bc:	94 a9       	ldd	r25, Z+52	; 0x34
 4be:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 11)
	UEDATX = *buffer++;
 4c2:	95 a9       	ldd	r25, Z+53	; 0x35
 4c4:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 10)
	UEDATX = *buffer++;
 4c8:	96 a9       	ldd	r25, Z+54	; 0x36
 4ca:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 9)
	UEDATX = *buffer++;
 4ce:	97 a9       	ldd	r25, Z+55	; 0x37
 4d0:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 8)
	UEDATX = *buffer++;
 4d4:	90 ad       	ldd	r25, Z+56	; 0x38
 4d6:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 7)
	UEDATX = *buffer++;
 4da:	91 ad       	ldd	r25, Z+57	; 0x39
 4dc:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 6)
	UEDATX = *buffer++;
 4e0:	92 ad       	ldd	r25, Z+58	; 0x3a
 4e2:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 5)
	UEDATX = *buffer++;
 4e6:	93 ad       	ldd	r25, Z+59	; 0x3b
 4e8:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 4)
	UEDATX = *buffer++;
 4ec:	94 ad       	ldd	r25, Z+60	; 0x3c
 4ee:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 3)
	UEDATX = *buffer++;
 4f2:	95 ad       	ldd	r25, Z+61	; 0x3d
 4f4:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 2)
	UEDATX = *buffer++;
 4f8:	96 ad       	ldd	r25, Z+62	; 0x3e
 4fa:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	#if (RAWHID_TX_SIZE >= 1)
	UEDATX = *buffer++;
 4fe:	97 ad       	ldd	r25, Z+63	; 0x3f
 500:	90 93 f1 00 	sts	0x00F1, r25
	#endif
	// transmit it now
	UEINTX = 0x3A;
 504:	9a e3       	ldi	r25, 0x3A	; 58
 506:	90 93 e8 00 	sts	0x00E8, r25
	SREG = intr_state;
 50a:	8f bf       	out	0x3f, r24	; 63
	return RAWHID_TX_SIZE;
 50c:	80 e4       	ldi	r24, 0x40	; 64
 50e:	08 95       	ret
	UENUM = RAWHID_TX_ENDPOINT;
	// wait for the FIFO to be ready to accept data
	while (1) {
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
		if (tx_timeout_count == 0) return 0;
 510:	80 e0       	ldi	r24, 0x00	; 0
	#endif
	// transmit it now
	UEINTX = 0x3A;
	SREG = intr_state;
	return RAWHID_TX_SIZE;
}
 512:	08 95       	ret

00000514 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 522:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 526:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 52a:	83 ff       	sbrs	r24, 3
 52c:	0f c0       	rjmp	.+30     	; 0x54c <__vector_10+0x38>
		UENUM = 0;
 52e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 538:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 53c:	92 e3       	ldi	r25, 0x32	; 50
 53e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 542:	98 e0       	ldi	r25, 0x08	; 8
 544:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 548:	10 92 04 01 	sts	0x0104, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 54c:	82 ff       	sbrs	r24, 2
 54e:	12 c0       	rjmp	.+36     	; 0x574 <__vector_10+0x60>
 550:	80 91 04 01 	lds	r24, 0x0104
 554:	88 23       	and	r24, r24
 556:	71 f0       	breq	.+28     	; 0x574 <__vector_10+0x60>
		t = rx_timeout_count;
 558:	80 91 03 01 	lds	r24, 0x0103
		if (t) rx_timeout_count = --t;
 55c:	88 23       	and	r24, r24
 55e:	19 f0       	breq	.+6      	; 0x566 <__vector_10+0x52>
 560:	81 50       	subi	r24, 0x01	; 1
 562:	80 93 03 01 	sts	0x0103, r24
		t = tx_timeout_count;
 566:	80 91 02 01 	lds	r24, 0x0102
		if (t) tx_timeout_count = --t;
 56a:	88 23       	and	r24, r24
 56c:	19 f0       	breq	.+6      	; 0x574 <__vector_10+0x60>
 56e:	81 50       	subi	r24, 0x01	; 1
 570:	80 93 02 01 	sts	0x0102, r24
	}
}
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	1f 93       	push	r17
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 5ae:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 5b2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 5b6:	83 ff       	sbrs	r24, 3
 5b8:	0b c1       	rjmp	.+534    	; 0x7d0 <__vector_11+0x24e>
                bmRequestType = UEDATX;
 5ba:	10 91 f1 00 	lds	r17, 0x00F1
                bRequest = UEDATX;
 5be:	80 91 f1 00 	lds	r24, 0x00F1
                wValue = UEDATX;
 5c2:	e0 90 f1 00 	lds	r14, 0x00F1
                wValue |= (UEDATX << 8);
 5c6:	90 91 f1 00 	lds	r25, 0x00F1
 5ca:	f1 2c       	mov	r15, r1
 5cc:	f9 2a       	or	r15, r25
                wIndex = UEDATX;
 5ce:	c0 91 f1 00 	lds	r28, 0x00F1
                wIndex |= (UEDATX << 8);
 5d2:	90 91 f1 00 	lds	r25, 0x00F1
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
 5d8:	d9 2b       	or	r29, r25
                wLength = UEDATX;
 5da:	20 91 f1 00 	lds	r18, 0x00F1
                wLength |= (UEDATX << 8);
 5de:	60 91 f1 00 	lds	r22, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 5e2:	92 ef       	ldi	r25, 0xF2	; 242
 5e4:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 5e8:	86 30       	cpi	r24, 0x06	; 6
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__vector_11+0x6c>
 5ec:	46 c0       	rjmp	.+140    	; 0x67a <__vector_11+0xf8>
 5ee:	37 e0       	ldi	r19, 0x07	; 7
 5f0:	8c ea       	ldi	r24, 0xAC	; 172
 5f2:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 5f4:	fc 01       	movw	r30, r24
 5f6:	45 91       	lpm	r20, Z+
 5f8:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 5fa:	4e 15       	cp	r20, r14
 5fc:	5f 05       	cpc	r21, r15
 5fe:	39 f4       	brne	.+14     	; 0x60e <__vector_11+0x8c>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
 600:	fc 01       	movw	r30, r24
 602:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 604:	45 91       	lpm	r20, Z+
 606:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 608:	4c 17       	cp	r20, r28
 60a:	5d 07       	cpc	r21, r29
 60c:	21 f0       	breq	.+8      	; 0x616 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-2;
 60e:	07 96       	adiw	r24, 0x07	; 7
 610:	31 50       	subi	r19, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 612:	81 f7       	brne	.-32     	; 0x5f4 <__vector_11+0x72>
 614:	dd c0       	rjmp	.+442    	; 0x7d0 <__vector_11+0x24e>
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 616:	fc 01       	movw	r30, r24
 618:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 61a:	45 91       	lpm	r20, Z+
 61c:	54 91       	lpm	r21, Z
				list += 2;
 61e:	fc 01       	movw	r30, r24
 620:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 622:	84 91       	lpm	r24, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	36 2b       	or	r19, r22
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 628:	2f 3f       	cpi	r18, 0xFF	; 255
 62a:	31 05       	cpc	r19, r1
 62c:	19 f0       	breq	.+6      	; 0x634 <__vector_11+0xb2>
 62e:	10 f0       	brcs	.+4      	; 0x634 <__vector_11+0xb2>
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	28 17       	cp	r18, r24
 636:	08 f4       	brcc	.+2      	; 0x63a <__vector_11+0xb8>
 638:	82 2f       	mov	r24, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 63a:	3e ef       	ldi	r19, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 63c:	90 91 e8 00 	lds	r25, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 640:	29 2f       	mov	r18, r25
 642:	25 70       	andi	r18, 0x05	; 5
 644:	d9 f3       	breq	.-10     	; 0x63c <__vector_11+0xba>
				if (i & (1<<RXOUTI)) return;	// abort
 646:	92 fd       	sbrc	r25, 2
 648:	c6 c0       	rjmp	.+396    	; 0x7d6 <__vector_11+0x254>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 64a:	98 2f       	mov	r25, r24
 64c:	81 34       	cpi	r24, 0x41	; 65
 64e:	08 f0       	brcs	.+2      	; 0x652 <__vector_11+0xd0>
 650:	90 e4       	ldi	r25, 0x40	; 64
				for (i = n; i; i--) {
 652:	fa 01       	movw	r30, r20
 654:	29 2f       	mov	r18, r25
 656:	22 23       	and	r18, r18
 658:	31 f0       	breq	.+12     	; 0x666 <__vector_11+0xe4>
					UEDATX = pgm_read_byte(desc_addr++);
 65a:	64 91       	lpm	r22, Z
 65c:	60 93 f1 00 	sts	0x00F1, r22
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 660:	21 50       	subi	r18, 0x01	; 1
 662:	31 96       	adiw	r30, 0x01	; 1
 664:	f8 cf       	rjmp	.-16     	; 0x656 <__vector_11+0xd4>
 666:	49 0f       	add	r20, r25
 668:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 66a:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 66c:	30 93 e8 00 	sts	0x00E8, r19
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 670:	81 11       	cpse	r24, r1
 672:	e4 cf       	rjmp	.-56     	; 0x63c <__vector_11+0xba>
 674:	90 34       	cpi	r25, 0x40	; 64
 676:	11 f3       	breq	.-60     	; 0x63c <__vector_11+0xba>
 678:	ae c0       	rjmp	.+348    	; 0x7d6 <__vector_11+0x254>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 67a:	85 30       	cpi	r24, 0x05	; 5
 67c:	49 f4       	brne	.+18     	; 0x690 <__vector_11+0x10e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 67e:	8e ef       	ldi	r24, 0xFE	; 254
 680:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 684:	41 de       	rcall	.-894    	; 0x308 <usb_wait_in_ready>
 686:	8e 2d       	mov	r24, r14
			UDADDR = wValue | (1<<ADDEN);
 688:	80 68       	ori	r24, 0x80	; 128
 68a:	80 93 e3 00 	sts	0x00E3, r24
 68e:	a3 c0       	rjmp	.+326    	; 0x7d6 <__vector_11+0x254>
			return;
 690:	89 30       	cpi	r24, 0x09	; 9
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 692:	39 f5       	brne	.+78     	; 0x6e2 <__vector_11+0x160>
 694:	11 11       	cpse	r17, r1
 696:	6a c0       	rjmp	.+212    	; 0x76c <__vector_11+0x1ea>
 698:	e0 92 04 01 	sts	0x0104, r14
			usb_configuration = wValue;
 69c:	8e ef       	ldi	r24, 0xFE	; 254
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 69e:	80 93 e8 00 	sts	0x00E8, r24
 6a2:	41 e0       	ldi	r20, 0x01	; 1
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 6a4:	82 e5       	ldi	r24, 0x52	; 82
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	40 93 e9 00 	sts	0x00E9, r20
			for (i=1; i<5; i++) {
				UENUM = i;
 6ac:	9c 01       	movw	r18, r24
				en = pgm_read_byte(cfg++);
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	fc 01       	movw	r30, r24
 6b4:	54 91       	lpm	r21, Z
 6b6:	50 93 eb 00 	sts	0x00EB, r21
				UECONX = en;
 6ba:	55 23       	and	r21, r21
				if (en) {
 6bc:	59 f0       	breq	.+22     	; 0x6d4 <__vector_11+0x152>
 6be:	f9 01       	movw	r30, r18
					UECFG0X = pgm_read_byte(cfg++);
 6c0:	24 91       	lpm	r18, Z
 6c2:	20 93 ec 00 	sts	0x00EC, r18
 6c6:	9c 01       	movw	r18, r24
					UECFG1X = pgm_read_byte(cfg++);
 6c8:	2d 5f       	subi	r18, 0xFD	; 253
 6ca:	3f 4f       	sbci	r19, 0xFF	; 255
 6cc:	31 96       	adiw	r30, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
				UECONX = en;
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 6ce:	84 91       	lpm	r24, Z
					UECFG1X = pgm_read_byte(cfg++);
 6d0:	80 93 ed 00 	sts	0x00ED, r24
 6d4:	4f 5f       	subi	r20, 0xFF	; 255
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 6d6:	45 30       	cpi	r20, 0x05	; 5
 6d8:	11 f0       	breq	.+4      	; 0x6de <__vector_11+0x15c>
 6da:	c9 01       	movw	r24, r18
 6dc:	e5 cf       	rjmp	.-54     	; 0x6a8 <__vector_11+0x126>
 6de:	8e e1       	ldi	r24, 0x1E	; 30
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 6e0:	40 c0       	rjmp	.+128    	; 0x762 <__vector_11+0x1e0>
 6e2:	88 30       	cpi	r24, 0x08	; 8
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 6e4:	49 f4       	brne	.+18     	; 0x6f8 <__vector_11+0x176>
 6e6:	10 38       	cpi	r17, 0x80	; 128
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__vector_11+0x16a>
 6ea:	40 c0       	rjmp	.+128    	; 0x76c <__vector_11+0x1ea>
 6ec:	0d de       	rcall	.-998    	; 0x308 <usb_wait_in_ready>
			usb_wait_in_ready();
 6ee:	80 91 04 01 	lds	r24, 0x0104
			UEDATX = usb_configuration;
 6f2:	80 93 f1 00 	sts	0x00F1, r24
 6f6:	68 c0       	rjmp	.+208    	; 0x7c8 <__vector_11+0x246>
 6f8:	81 11       	cpse	r24, r1
 6fa:	13 c0       	rjmp	.+38     	; 0x722 <__vector_11+0x1a0>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 6fc:	05 de       	rcall	.-1014   	; 0x308 <usb_wait_in_ready>
 6fe:	12 38       	cpi	r17, 0x82	; 130
			usb_wait_in_ready();
 700:	51 f4       	brne	.+20     	; 0x716 <__vector_11+0x194>
 702:	c0 93 e9 00 	sts	0x00E9, r28
			i = 0;
			if (bmRequestType == 0x82) {
 706:	80 91 eb 00 	lds	r24, 0x00EB
				UENUM = wIndex;
 70a:	85 fb       	bst	r24, 5
				if (UECONX & (1<<STALLRQ)) i = 1;
 70c:	88 27       	eor	r24, r24
 70e:	80 f9       	bld	r24, 0
 710:	10 92 e9 00 	sts	0x00E9, r1
 714:	01 c0       	rjmp	.+2      	; 0x718 <__vector_11+0x196>
				UENUM = 0;
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 71c:	10 92 f1 00 	sts	0x00F1, r1
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			UEDATX = i;
 720:	53 c0       	rjmp	.+166    	; 0x7c8 <__vector_11+0x246>
			UEDATX = 0;
 722:	98 2f       	mov	r25, r24
 724:	9d 7f       	andi	r25, 0xFD	; 253
 726:	91 30       	cpi	r25, 0x01	; 1
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 728:	09 f5       	brne	.+66     	; 0x76c <__vector_11+0x1ea>
 72a:	12 30       	cpi	r17, 0x02	; 2
 72c:	f9 f4       	brne	.+62     	; 0x76c <__vector_11+0x1ea>
 72e:	ef 28       	or	r14, r15
		  && bmRequestType == 0x02 && wValue == 0) {
 730:	09 f0       	breq	.+2      	; 0x734 <__vector_11+0x1b2>
 732:	4e c0       	rjmp	.+156    	; 0x7d0 <__vector_11+0x24e>
 734:	cf 77       	andi	r28, 0x7F	; 127
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	9c 0f       	add	r25, r28
			i = wIndex & 0x7F;
 73a:	94 30       	cpi	r25, 0x04	; 4
			if (i >= 1 && i <= MAX_ENDPOINT) {
 73c:	08 f0       	brcs	.+2      	; 0x740 <__vector_11+0x1be>
 73e:	48 c0       	rjmp	.+144    	; 0x7d0 <__vector_11+0x24e>
 740:	9e ef       	ldi	r25, 0xFE	; 254
 742:	90 93 e8 00 	sts	0x00E8, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 746:	c0 93 e9 00 	sts	0x00E9, r28
 74a:	83 30       	cpi	r24, 0x03	; 3
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 74c:	09 f4       	brne	.+2      	; 0x750 <__vector_11+0x1ce>
 74e:	40 c0       	rjmp	.+128    	; 0x7d0 <__vector_11+0x24e>
				if (bRequest == SET_FEATURE) {
 750:	89 e1       	ldi	r24, 0x19	; 25
 752:	80 93 eb 00 	sts	0x00EB, r24
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	01 c0       	rjmp	.+2      	; 0x75e <__vector_11+0x1dc>
					UERST = (1 << i);
 75c:	88 0f       	add	r24, r24
 75e:	ca 95       	dec	r28
 760:	ea f7       	brpl	.-6      	; 0x75c <__vector_11+0x1da>
 762:	80 93 ea 00 	sts	0x00EA, r24
 766:	10 92 ea 00 	sts	0x00EA, r1
 76a:	35 c0       	rjmp	.+106    	; 0x7d6 <__vector_11+0x254>
					UERST = 0;
 76c:	cd 2b       	or	r28, r29
 76e:	81 f5       	brne	.+96     	; 0x7d0 <__vector_11+0x24e>
 770:	11 3a       	cpi	r17, 0xA1	; 161
				}
				return;
			}
		}
		if (wIndex == RAWHID_INTERFACE) {
 772:	f1 f4       	brne	.+60     	; 0x7b0 <__vector_11+0x22e>
 774:	81 30       	cpi	r24, 0x01	; 1
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
 776:	61 f5       	brne	.+88     	; 0x7d0 <__vector_11+0x24e>
 778:	80 e4       	ldi	r24, 0x40	; 64
 77a:	3e ef       	ldi	r19, 0xFE	; 254
 77c:	90 91 e8 00 	lds	r25, 0x00E8
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 780:	29 2f       	mov	r18, r25
			if (bmRequestType == 0xA1 && bRequest == HID_GET_REPORT) {
				len = RAWHID_TX_SIZE;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 782:	25 70       	andi	r18, 0x05	; 5
 784:	d9 f3       	breq	.-10     	; 0x77c <__vector_11+0x1fa>
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 786:	92 fd       	sbrc	r25, 2
 788:	26 c0       	rjmp	.+76     	; 0x7d6 <__vector_11+0x254>
 78a:	98 2f       	mov	r25, r24
					if (i & (1<<RXOUTI)) return;	// abort
 78c:	81 34       	cpi	r24, 0x41	; 65
 78e:	08 f0       	brcs	.+2      	; 0x792 <__vector_11+0x210>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 790:	90 e4       	ldi	r25, 0x40	; 64
 792:	29 2f       	mov	r18, r25
 794:	22 23       	and	r18, r18
 796:	21 f0       	breq	.+8      	; 0x7a0 <__vector_11+0x21e>
					for (i = n; i; i--) {
 798:	10 92 f1 00 	sts	0x00F1, r1
 79c:	21 50       	subi	r18, 0x01	; 1
						// just send zeros
						UEDATX = 0;
 79e:	fa cf       	rjmp	.-12     	; 0x794 <__vector_11+0x212>
 7a0:	89 1b       	sub	r24, r25
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 7a2:	30 93 e8 00 	sts	0x00E8, r19
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
 7a6:	81 11       	cpse	r24, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7a8:	e9 cf       	rjmp	.-46     	; 0x77c <__vector_11+0x1fa>
 7aa:	90 34       	cpi	r25, 0x40	; 64
						// just send zeros
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 7ac:	39 f3       	breq	.-50     	; 0x77c <__vector_11+0x1fa>
 7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <__vector_11+0x254>
 7b0:	11 32       	cpi	r17, 0x21	; 33
 7b2:	71 f4       	brne	.+28     	; 0x7d0 <__vector_11+0x24e>
 7b4:	89 30       	cpi	r24, 0x09	; 9
				return;
			}
			if (bmRequestType == 0x21 && bRequest == HID_SET_REPORT) {
 7b6:	61 f4       	brne	.+24     	; 0x7d0 <__vector_11+0x24e>
 7b8:	80 91 e8 00 	lds	r24, 0x00E8
 7bc:	82 ff       	sbrs	r24, 2
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 7be:	fc cf       	rjmp	.-8      	; 0x7b8 <__vector_11+0x236>
 7c0:	8b ef       	ldi	r24, 0xFB	; 251
 7c2:	80 93 e8 00 	sts	0x00E8, r24
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 7c6:	a0 dd       	rcall	.-1216   	; 0x308 <usb_wait_in_ready>
 7c8:	8e ef       	ldi	r24, 0xFE	; 254
 7ca:	80 93 e8 00 	sts	0x00E8, r24
					usb_wait_receive_out();
					// ignore incoming bytes
					usb_ack_out();
					len -= n;
				} while (len);
				usb_wait_in_ready();
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <__vector_11+0x254>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7d0:	81 e2       	ldi	r24, 0x21	; 33
 7d2:	80 93 eb 00 	sts	0x00EB, r24
 7d6:	ff 91       	pop	r31
				usb_send_in();
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7d8:	ef 91       	pop	r30
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
}
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	7f 91       	pop	r23
 7e8:	6f 91       	pop	r22
 7ea:	5f 91       	pop	r21
 7ec:	4f 91       	pop	r20
 7ee:	3f 91       	pop	r19
 7f0:	2f 91       	pop	r18
 7f2:	1f 91       	pop	r17
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <_exit>:
 802:	f8 94       	cli

00000804 <__stop_program>:
 804:	ff cf       	rjmp	.-2      	; 0x804 <__stop_program>
